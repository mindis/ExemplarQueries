#!/usr/bin/env python

import sys
import re


#Convert a long into a Freebase mid
def long2mid(long): 
	mid = ""
	decimal_string = "{0}".format(decimal)
	decimal_string_len = len(decimal_string)
	n = 2

	number_pairs= [decimal_string[i:i+n] for i in range(0, decimal_string_len, n)]
	for i in  number_pairs :
		num = int(i)
		#print i + " - {0}" + chr(num)
		mid = chr(num) + mid
	return "/m/" + mid.lower()

#Convert a Frebase mid into a long
def mid2long(mid):
	mid = mid.upper() 
	decimal = ""
	for i in mid[3:]:
		num = ord(i)
		#print i + " - {0}".format(num)
		decimal = "{0}".format(num) + decimal
	return decimal

#Check either subj,obj,rel and convert it to a decimal
def checkConvert(value, mapping): 
	#Is a mid
	longStr = value
	if value == "/type/type/instance" :
		longStr = "6848"
	elif re.match("/m/[0-9|a-b|_]+", value): 
		longStr = mid2long(value)
	elif not re.match("^[0-9]+$", value):
		longStr = str(mapping[value])
	return longStr


if len(sys.argv) < 4:
    print "tsv2long tsvFile mappingFile outputFile isa"
    print "Convert a tsv file into a long file"
    exit(2)

tsv = sys.argv[1]
mapping = sys.argv[2]
outputFile = sys.argv[3]
isa = bool(sys.argv[4])
midMap = {}

with open(mapping,'r') as m: 
	for line in m: 
		splittedLine = line.split('\t')	
		#print splittedLine[0],mid2long(splittedLine[1].strip())
		midMap[splittedLine[0].strip()] = mid2long(splittedLine[1].strip())
	#print midMap 


subjIdx = 0
objIdx = 2
if isa : 
	subjIdx = 2
	objIdx = 0


lineNo = 0
with open(tsv,'r') as t, open(outputFile,'w') as out: 
	for line in t: 
		lineNo += 1
		splittedLine = line.split('\t')

		subj = splittedLine[subjIdx].strip()
		obj = splittedLine[objIdx].strip()
		rel = splittedLine[1].strip()
		try :
			out.write(checkConvert(subj,midMap) + " " + checkConvert(obj,midMap) + " " + checkConvert(rel,midMap) + "\n")
		except KeyError: 
			print "Line %d is not well-formmatted and threw a KeyError" % lineNo








